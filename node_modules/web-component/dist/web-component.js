(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global['web-component'] = global['web-component'] || {})));
}(this, (function (exports) { 'use strict';

function applyMiddleware() {
  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  return function (target) {
    return compose.apply(undefined, middlewares)(target);
  };
}

function applyOptionsMiddleware() {
  for (var _len2 = arguments.length, middlewares = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    middlewares[_key2] = arguments[_key2];
  }

  return function (target) {
    return function (options) {
      var chain = middlewares.map(function (middleware) {
        return middleware(target);
      });
      return compose.apply(undefined, chain)(options);
    };
  };
}

function compose() {
  for (var _len3 = arguments.length, funcs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    funcs[_key3] = arguments[_key3];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  }

  if (funcs.length === 1) {
    return funcs[0];
  }

  return funcs.reduce(function (a, b) {
    return function () {
      return a(b.apply(undefined, arguments));
    };
  });
}

var setTemplate = (function (target) {
  return function (options) {
    var template = createTemplate(options.template);
    if (template) {
      target.appendChild(template);
    }

    return options;
  };
});

function createTemplate(template) {
  if (!template) {
    return null;
  }

  var t = document.createElement('template');
  t.innerHTML = template;

  return t.content.cloneNode(true);
}

var setStyles = (function (target) {
  return function (options) {
    var styles = createStyles(options.styles);
    if (styles) {
      target.appendChild(styles);
    }

    return options;
  };
});

function createStyles(styles) {
  if (!styles) {
    return null;
  }
  var s = document.createElement('style');
  s.textContent = styles;

  return s;
}

var connectedCallback = (function (options) {
  return function (original) {
    var cb = original.prototype.connectedCallback;
    original.prototype.connectedCallback = function () {
      var target = this;
      if (options.shadowDOM === true) {
        var shadowRoot = constructor.shadowRoot;
        if (!shadowRoot) {
          shadowRoot = constructor.attachShadow({
            mode: 'open'
          });
        }
        target = shadowRoot;
      }

      applyOptionsMiddleware(setTemplate, setStyles)(target)(options);

      var oAttr = original.observedAttributes;
      if (oAttr && oAttr.indexOf(name) > -1) {
        this['_' + name] = this.getAttribute(name);
      }

      if (cb) {
        cb.call(this);
      }
    };

    return original;
  };
});

var attributeChangedCallback = (function (original) {
  var ac = original.prototype.attributeChangedCallback;
  original.prototype.attributeChangedCallback = function (name, oldValue, newValue) {
    var oAttr = original.observedAttributes;
    if (oAttr && oAttr.indexOf(name) > -1) {
      this['_' + name] = newValue;
    }

    if (ac) {
      ac.call(this);
    }
  };

  return original;
});

var proxy = (function (original) {
  var oAttr = original.observedAttributes;

  if (oAttr) {
    oAttr.forEach(function (name) {
      Object.defineProperty(original.prototype, name, {
        get: function get() {
          return this['_' + name];
        },
        set: function set(value) {
          this.setAttribute(name, value);
        },
        configurable: true
      });
    });
  }

  return original;
});

function WebComponent(name, options) {
  return function (target) {
    target = applyMiddleware(connectedCallback(options), attributeChangedCallback, proxy)(target);

    if (options['extends']) {
      customElements.define(name, target, {
        'extends': options['extends']
      });
    } else {
      customElements.define(name, target);
    }

    return target;
  };
}

exports.WebComponent = WebComponent;

Object.defineProperty(exports, '__esModule', { value: true });

})));
